// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/command.proto

#include "proto/command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace platform {
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
} _Command_default_instance_;
}  // namespace platform
namespace protobuf_proto_2fcommand_2eproto {
static void InitDefaultsCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::platform::_Command_default_instance_;
    new (ptr) ::platform::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::platform::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommand}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Command.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::platform::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::platform::Command, command_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::platform::Command, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::platform::Command, move_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::platform::Command, view_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::platform::Command, parameter_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::platform::Command)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::platform::_Command_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/command.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023proto/command.proto\022\010platform\"\204\001\n\007Comm"
      "and\022+\n\014command_type\030\001 \001(\0162\025.platform.Com"
      "mandType\022\021\n\ttarget_ID\030\002 \001(\005\022\022\n\nmove_angl"
      "e\030\003 \001(\001\022\022\n\nview_angle\030\004 \001(\001\022\021\n\tparameter"
      "\030\005 \001(\005*9\n\013CommandType\022\010\n\004MOVE\020\000\022\t\n\005SHOOT"
      "\020\001\022\n\n\006PICKUP\020\002\022\t\n\005RADIO\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/command.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fcommand_2eproto
namespace platform {
const ::google::protobuf::EnumDescriptor* CommandType_descriptor() {
  protobuf_proto_2fcommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fcommand_2eproto::file_level_enum_descriptors[0];
}
bool CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Command::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kCommandTypeFieldNumber;
const int Command::kTargetIDFieldNumber;
const int Command::kMoveAngleFieldNumber;
const int Command::kViewAngleFieldNumber;
const int Command::kParameterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fcommand_2eproto::scc_info_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:platform.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_type_, &from.command_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parameter_) -
    reinterpret_cast<char*>(&command_type_)) + sizeof(parameter_));
  // @@protoc_insertion_point(copy_constructor:platform.Command)
}

void Command::SharedCtor() {
  ::memset(&command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parameter_) -
      reinterpret_cast<char*>(&command_type_)) + sizeof(parameter_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:platform.Command)
  SharedDtor();
}

void Command::SharedDtor() {
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_proto_2fcommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fcommand_2eproto::scc_info_Command.base);
  return *internal_default_instance();
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:platform.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parameter_) -
      reinterpret_cast<char*>(&command_type_)) + sizeof(parameter_));
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:platform.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .platform.CommandType command_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_command_type(static_cast< ::platform::CommandType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_ID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double move_angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &move_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double view_angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &view_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parameter = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:platform.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:platform.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:platform.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .platform.CommandType command_type = 1;
  if (this->command_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command_type(), output);
  }

  // int32 target_ID = 2;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_id(), output);
  }

  // double move_angle = 3;
  if (this->move_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->move_angle(), output);
  }

  // double view_angle = 4;
  if (this->view_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->view_angle(), output);
  }

  // int32 parameter = 5;
  if (this->parameter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->parameter(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:platform.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:platform.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .platform.CommandType command_type = 1;
  if (this->command_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command_type(), target);
  }

  // int32 target_ID = 2;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_id(), target);
  }

  // double move_angle = 3;
  if (this->move_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->move_angle(), target);
  }

  // double view_angle = 4;
  if (this->view_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->view_angle(), target);
  }

  // int32 parameter = 5;
  if (this->parameter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->parameter(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:platform.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:platform.Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .platform.CommandType command_type = 1;
  if (this->command_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_type());
  }

  // int32 target_ID = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_id());
  }

  // double move_angle = 3;
  if (this->move_angle() != 0) {
    total_size += 1 + 8;
  }

  // double view_angle = 4;
  if (this->view_angle() != 0) {
    total_size += 1 + 8;
  }

  // int32 parameter = 5;
  if (this->parameter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parameter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:platform.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:platform.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:platform.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:platform.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_type() != 0) {
    set_command_type(from.command_type());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
  if (from.move_angle() != 0) {
    set_move_angle(from.move_angle());
  }
  if (from.view_angle() != 0) {
    set_view_angle(from.view_angle());
  }
  if (from.parameter() != 0) {
    set_parameter(from.parameter());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:platform.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:platform.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(command_type_, other->command_type_);
  swap(target_id_, other->target_id_);
  swap(move_angle_, other->move_angle_);
  swap(view_angle_, other->view_angle_);
  swap(parameter_, other->parameter_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_proto_2fcommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fcommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace platform
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::platform::Command* Arena::CreateMaybeMessage< ::platform::Command >(Arena* arena) {
  return Arena::CreateInternal< ::platform::Command >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
