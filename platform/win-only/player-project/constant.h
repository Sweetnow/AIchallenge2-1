// Generated by const.py.  DO NOT EDIT! DO NOT FORMAT!
//recommend using 1920*1080 zoom 100% to display
#ifndef CONSTANT_H
#define CONSTANT_H

#include <vector>

struct XYPosition
{
    double x, y;
};

struct PolarPosition
{
    double distance;
    double angle;
};

const double AIRPLANE_SPEED = 5;
const double JUMPING_SPEED = 1;

enum STATUS
{
    RELAX = 0,
    ON_PLANE = 1,
    JUMPING = 2,
    MOVING = 3,
    SHOOTING = 4,
    PICKUP = 5,
    MOVING_SHOOTING = 6,
    DEAD = 7,
    REAL_DEAD = 8
};

enum VOCATION
{
    MEDIC = 0,
    SIGNALMAN = 1,
    HACK = 2,
    SNIPER = 3,
    VOCATION_SZ = 4,
};

struct vocation_property
{
    int number;
    double hp;
    double distance;
    double angle;
    double radius;
    double move;
    double skill;
};

const vocation_property VOCATION_DATA[VOCATION_SZ] = 
{ //     number        hp  distance     angle    radius      move     skill
    {        0,   120.00,   160.00,   124.00,     0.50,     1.80,     0.50},    // MEDIC
    {        1,   100.00,   160.00,   124.00,     0.45,     1.60,     2.00},    // SIGNALMAN
    {        2,    90.00,   160.00,   124.00,     0.43,     1.20,     1.00},    // HACK
    {        3,    80.00,   200.00,   115.00,     0.40,     1.00,     1.50},    // SNIPER
};

enum ITEM_TYPE
{
    WEAPON = 0,
    ARMOR = 1,
    GOODS = 2,
    ITEM_TYPE_SZ = 3,
};

enum ITEM_MODE
{
    PORTABLE = 0,
    SPENDABLE = 1,
    TRIGGERED = 2,
    ITEM_MODE_SZ = 3,
};

enum ITEM
{
    FIST = 0,
    HAND_GUN = 1,
    SUBMACHINE_GUN = 2,
    SEMI_AUTOMATIC_RILE = 3,
    ASSAULT_RIFLE = 4,
    MACHINE_GUN = 5,
    SNIPER_RILFE = 6,
    SNIPER_BARRETT = 7,
    TIGER_BILLOW_HAMMER = 8,
    CROSSBOW = 9,
    VEST_1 = 10,
    VEST_2 = 11,
    VEST_3 = 12,
    INSULATED_CLOTHING = 13,
    MUFFLER = 14,
    BONDAGE = 15,
    FIRST_AID_CASE = 16,
    CODE_CASE = 17,
    SCOPE_2 = 18,
    SCOPE_4 = 19,
    SCOPE_8 = 20,
    ITEM_SZ = 21,
};

struct item_property
{
    ITEM_TYPE type;
    int number;
    int durability;
    ITEM_MODE mode;
    int range;
    int cd;
    int damage;
    int reduce;
    double param;
    int occur;
};

const item_property ITEM_DATA[ITEM_SZ] = 
{ //        type     number durability       mode      range         cd     damage     reduce      param      occur
    {    WEAPON,         0,      9999,ITEM_MODE_SZ,         1,         4,        30,         0,     30.00,         0},    // FIST
    {    WEAPON,         1,         8,ITEM_MODE_SZ,        80,         4,        25,         0,      2.50,       100},    // HAND_GUN
    {    WEAPON,         2,        20,ITEM_MODE_SZ,       100,         1,        25,         0,      2.50,        50},    // SUBMACHINE_GUN
    {    WEAPON,         3,        15,ITEM_MODE_SZ,       150,         3,        30,         0,      1.50,        50},    // SEMI_AUTOMATIC_RILE
    {    WEAPON,         4,        20,ITEM_MODE_SZ,       150,         2,        40,         0,      2.00,        35},    // ASSAULT_RIFLE
    {    WEAPON,         5,        50,ITEM_MODE_SZ,       100,         1,        40,         0,      3.00,        20},    // MACHINE_GUN
    {    WEAPON,         6,         8,ITEM_MODE_SZ,       600,         8,       100,         0,      0.50,        20},    // SNIPER_RILFE
    {    WEAPON,         7,         5,ITEM_MODE_SZ,      1000,        10,       150,         0,      0.30,        10},    // SNIPER_BARRETT
    {    WEAPON,         8,        20,ITEM_MODE_SZ,         2,         5,        50,         0,     60.00,        30},    // TIGER_BILLOW_HAMMER
    {    WEAPON,         9,        10,ITEM_MODE_SZ,       100,         6,        30,         0,      1.00,        25},    // CROSSBOW
    {     ARMOR,        10,       100,ITEM_MODE_SZ,         0,         0,         0,         0,      0.00,        50},    // VEST_1
    {     ARMOR,        11,       150,ITEM_MODE_SZ,         0,         0,         0,         0,      0.00,        25},    // VEST_2
    {     ARMOR,        12,       200,ITEM_MODE_SZ,         0,         0,         0,         0,      0.00,        10},    // VEST_3
    {     ARMOR,        13,       100,ITEM_MODE_SZ,         0,         0,         0,         0,      0.00,        30},    // INSULATED_CLOTHING
    {     GOODS,        14,         1,    PORTABLE,         0,         0,         0,         0,      0.30,        10},    // MUFFLER
    {     GOODS,        15,         1,   SPENDABLE,         0,         5,         0,         0,    -20.00,        60},    // BONDAGE
    {     GOODS,        16,         1,   SPENDABLE,         0,         8,         0,         0,   -100.00,        20},    // FIRST_AID_CASE
    {     GOODS,        17,         1,   TRIGGERED,         0,         0,         0,         0,      0.00,        30},    // CODE_CASE
    {     GOODS,        18,         1,   SPENDABLE,         0,         0,         0,         0,      0.00,        50},    // SCOPE_2
    {     GOODS,        19,         1,   SPENDABLE,         0,         0,         0,         0,      0.00,        25},    // SCOPE_4
    {     GOODS,        20,         1,   SPENDABLE,         0,         0,         0,         0,      0.00,        10},    // SCOPE_8
};

enum SOUND
{
    RADIO_VOICE = 0,
    FOOTSTEP_SOUND = 1,
    GUN_SOUND = 2,
    BOOM_SOUND = 3,
    SOUND_SZ = 4,
};

struct sound_property
{
    int number;
    double speed;
    double distance;
};

const sound_property SOUND_DATA[SOUND_SZ] = 
{ //     number     speed  distance
    {        0,   500.00,  3000.00},    // RADIO_VOICE
    {        1,    50.00,   100.00},    // FOOTSTEP_SOUND
    {        2,   100.00,   300.00},    // GUN_SOUND
    {        3,   200.00,   600.00},    // BOOM_SOUND
};

enum BLOCK_SHAPE
{
    DOT = 0,
    CIRCLE = 1,
    RECTANGLE = 2,
    BLOCK_SHAPE_SZ = 3,
};

enum BLOCK_TYPE
{
    DEEP_WATER = 0,
    RECTANGLE_BUILDING = 1,
    SHALLOW_WATER = 2,
    CIRCLE_BUILDING = 3,
    WALL = 4,
    TREE = 5,
    RECTANGLE_GRASS = 6,
    CIRCLE_GRASS = 7,
    BLOCK_TYPE_SZ = 8,
};


struct block {
    BLOCK_SHAPE shape;
    BLOCK_TYPE type;
    int x0, y0, r, x1, y1;
    //when shape == RECTANGLE, (x0, y0) and (x1, y1) are used (left-top and right-bottom)
    //when shape == CIRCLE, (x0, y0) and r are used (center and radius)
    //when shape == DOT, only (x0, y0) is used as its position
};

enum AREA
{
    SEA = 0,
    HILL = 1,
    POOL = 2,
    BEACH = 3,
    CITY = 4,
    FARMLAND = 5,
    ROADA = 6,
    ROADB = 7,
    GRASS = 8,
    FOREST = 9,
    AREA_SZ = 10,
};

const std::vector<block> AREA_DATA[AREA_SZ] = 
{ //           shape                 type    x0    y0     r    x1    y2
    {
        { RECTANGLE,          DEEP_WATER,    0,  100,    0,  100,    0},
    },    // sea
    {
        { RECTANGLE,  RECTANGLE_BUILDING,    5,   30,    0,   25,   10},
        { RECTANGLE,  RECTANGLE_BUILDING,   40,   45,    0,   60,   20},
        { RECTANGLE,  RECTANGLE_BUILDING,   70,   90,    0,   90,   60},
        { RECTANGLE,  RECTANGLE_BUILDING,   10,   90,    0,   40,   70},
        { RECTANGLE,  RECTANGLE_BUILDING,   80,   50,    0,   90,   10},
    },    // hill
    {
        { RECTANGLE,       SHALLOW_WATER,    0,  100,    0,  100,    0},
        { RECTANGLE,  RECTANGLE_BUILDING,   15,   50,    0,   25,   10},
        { RECTANGLE,  RECTANGLE_BUILDING,   45,   90,    0,   55,   50},
        { RECTANGLE,  RECTANGLE_BUILDING,   75,   70,    0,   85,   30},
    },    // pool
    {
        {    CIRCLE,     CIRCLE_BUILDING,   20,   30,   10,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   70,   80,   10,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   50,   10,    7,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   30,   70,    7,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   80,   40,    7,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   50,   50,    5,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   80,   20,    5,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   10,   90,    4,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   90,   75,    4,    0,    0},
        {    CIRCLE,     CIRCLE_BUILDING,   10,   10,    4,    0,    0},
    },    // beach
    {
        { RECTANGLE,                WALL,    5,    5,    0,   35,    5},
        { RECTANGLE,                WALL,    5,    5,    0,    5,   35},
        { RECTANGLE,                WALL,   95,    5,    0,   65,    5},
        { RECTANGLE,                WALL,   95,    5,    0,   95,   35},
        { RECTANGLE,                WALL,    5,   95,    0,    5,   65},
        { RECTANGLE,                WALL,    5,   95,    0,   35,   95},
        { RECTANGLE,                WALL,   95,   95,    0,   95,   65},
        { RECTANGLE,                WALL,   95,   95,    0,   65,   95},
        { RECTANGLE,  RECTANGLE_BUILDING,   10,   30,    0,   30,   10},
        { RECTANGLE,  RECTANGLE_BUILDING,   40,   30,    0,   60,   10},
        { RECTANGLE,  RECTANGLE_BUILDING,   70,   30,    0,   90,   10},
        { RECTANGLE,  RECTANGLE_BUILDING,   10,   90,    0,   30,   70},
        { RECTANGLE,  RECTANGLE_BUILDING,   40,   90,    0,   60,   70},
        { RECTANGLE,  RECTANGLE_BUILDING,   70,   90,    0,   90,   70},
        {       DOT,                TREE,   10,   35,    0,    0,    0},
        {       DOT,                TREE,   35,   35,    0,    0,    0},
        {       DOT,                TREE,   65,   35,    0,    0,    0},
        {       DOT,                TREE,   90,   35,    0,    0,    0},
        {       DOT,                TREE,   10,   65,    0,    0,    0},
        {       DOT,                TREE,   35,   65,    0,    0,    0},
        {       DOT,                TREE,   65,   65,    0,    0,    0},
        {       DOT,                TREE,   90,   65,    0,    0,    0},
    },    // city
    {
        { RECTANGLE,     RECTANGLE_GRASS,   10,   90,    0,   20,   10},
        { RECTANGLE,     RECTANGLE_GRASS,   30,   90,    0,   40,   10},
        { RECTANGLE,     RECTANGLE_GRASS,   50,   90,    0,   60,   10},
        { RECTANGLE,     RECTANGLE_GRASS,   70,   90,    0,   80,   10},
        { RECTANGLE,  RECTANGLE_BUILDING,   80,   60,    0,  100,   40},
        { RECTANGLE,       SHALLOW_WATER,   20,   90,    0,   30,   10},
        { RECTANGLE,       SHALLOW_WATER,   40,   90,    0,   50,   10},
        { RECTANGLE,       SHALLOW_WATER,   60,   90,    0,   70,   10},
        {       DOT,                TREE,    9,    5,    0,    0,    0},
        {       DOT,                TREE,    3,   18,    0,    0,    0},
        {       DOT,                TREE,    6,   45,    0,    0,    0},
        {       DOT,                TREE,    4,   74,    0,    0,    0},
        {       DOT,                TREE,   10,   95,    0,    0,    0},
        {       DOT,                TREE,   85,   95,    0,    0,    0},
        {       DOT,                TREE,   94,   85,    0,    0,    0},
        {       DOT,                TREE,   85,   70,    0,    0,    0},
        {       DOT,                TREE,   75,    5,    0,    0,    0},
        {       DOT,                TREE,   95,   14,    0,    0,    0},
        {       DOT,                TREE,   85,   30,    0,    0,    0},
    },    // farmland
    {
        { RECTANGLE,                WALL,   20,   10,    0,   40,   30},
        { RECTANGLE,                WALL,   50,   40,    0,   70,   60},
        { RECTANGLE,                WALL,   80,   70,    0,  100,   90},
        { RECTANGLE,                WALL,   10,   20,    0,   30,   40},
        { RECTANGLE,                WALL,   40,   50,    0,   60,   70},
        { RECTANGLE,                WALL,   70,   80,    0,   90,  100},
        {    CIRCLE,        CIRCLE_GRASS,   40,   10,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   70,   30,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   85,   10,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   30,   80,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   20,   50,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   55,   90,    4,    0,    0},
        {       DOT,                TREE,   50,   20,    0,    0,    0},
        {       DOT,                TREE,   80,   50,    0,    0,    0},
        {       DOT,                TREE,   70,    5,    0,    0,    0},
        {       DOT,                TREE,   95,   25,    0,    0,    0},
        {       DOT,                TREE,   10,   30,    0,    0,    0},
        {       DOT,                TREE,   35,   65,    0,    0,    0},
        {       DOT,                TREE,   15,   85,    0,    0,    0},
        {       DOT,                TREE,   65,   90,    0,    0,    0},
    },    // roadA
    {
        { RECTANGLE,                WALL,   10,   80,    0,   30,   60},
        { RECTANGLE,                WALL,   40,   50,    0,   60,   30},
        { RECTANGLE,                WALL,   70,   20,    0,   90,    0},
        { RECTANGLE,                WALL,   20,   90,    0,   40,   70},
        { RECTANGLE,                WALL,   50,   60,    0,   70,   40},
        { RECTANGLE,                WALL,   80,   30,    0,  100,   10},
        {    CIRCLE,        CIRCLE_GRASS,   55,   80,    4,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   75,   55,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   85,   90,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   10,   60,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   30,   20,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   65,   10,    5,    0,    0},
        {       DOT,                TREE,   20,   50,    0,    0,    0},
        {       DOT,                TREE,   10,   20,    0,    0,    0},
        {       DOT,                TREE,   75,    5,    0,    0,    0},
        {       DOT,                TREE,   55,   20,    0,    0,    0},
        {       DOT,                TREE,   90,   35,    0,    0,    0},
        {       DOT,                TREE,   60,   60,    0,    0,    0},
        {       DOT,                TREE,   75,   75,    0,    0,    0},
        {       DOT,                TREE,   40,   90,    0,    0,    0},
    },    // roadB
    {
        {    CIRCLE,        CIRCLE_GRASS,   10,   10,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   30,    5,    4,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   35,   30,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   55,   20,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   70,   10,    4,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   90,   25,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   70,   40,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   80,   70,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   90,   95,    4,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   65,   85,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   50,   60,    6,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   30,   80,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,   10,   60,    5,    0,    0},
        {    CIRCLE,        CIRCLE_GRASS,    5,   95,    4,    0,    0},
    },    // grass
    {
        {       DOT,                TREE,   26,   34,    0,    0,    0},
        {       DOT,                TREE,   41,   50,    0,    0,    0},
        {       DOT,                TREE,   67,   61,    0,    0,    0},
        {       DOT,                TREE,   93,   82,    0,    0,    0},
        {       DOT,                TREE,   81,   53,    0,    0,    0},
        {       DOT,                TREE,   48,   20,    0,    0,    0},
        {       DOT,                TREE,   76,    5,    0,    0,    0},
        {       DOT,                TREE,   42,   43,    0,    0,    0},
        {       DOT,                TREE,   97,   97,    0,    0,    0},
        {       DOT,                TREE,   86,   70,    0,    0,    0},
        {       DOT,                TREE,   39,   73,    0,    0,    0},
        {       DOT,                TREE,   45,   35,    0,    0,    0},
        {       DOT,                TREE,   23,   50,    0,    0,    0},
        {       DOT,                TREE,   78,   56,    0,    0,    0},
        {       DOT,                TREE,   88,   16,    0,    0,    0},
        {       DOT,                TREE,   91,   56,    0,    0,    0},
        {       DOT,                TREE,   56,   69,    0,    0,    0},
        {       DOT,                TREE,   60,   43,    0,    0,    0},
        {       DOT,                TREE,   15,   84,    0,    0,    0},
        {       DOT,                TREE,   93,   74,    0,    0,    0},
        {       DOT,                TREE,   48,   33,    0,    0,    0},
        {       DOT,                TREE,   20,   45,    0,    0,    0},
        {       DOT,                TREE,   90,   39,    0,    0,    0},
        {       DOT,                TREE,   76,   78,    0,    0,    0},
        {       DOT,                TREE,   88,   73,    0,    0,    0},
        {       DOT,                TREE,   28,   43,    0,    0,    0},
        {       DOT,                TREE,   67,   68,    0,    0,    0},
        {       DOT,                TREE,   66,   95,    0,    0,    0},
        {       DOT,                TREE,   12,   78,    0,    0,    0},
        {       DOT,                TREE,   41,   71,    0,    0,    0},
        {       DOT,                TREE,   28,   11,    0,    0,    0},
        {       DOT,                TREE,   72,   39,    0,    0,    0},
        {       DOT,                TREE,   30,   60,    0,    0,    0},
        {       DOT,                TREE,   90,   46,    0,    0,    0},
        {       DOT,                TREE,   83,    5,    0,    0,    0},
        {       DOT,                TREE,   39,   23,    0,    0,    0},
        {       DOT,                TREE,   50,   86,    0,    0,    0},
        {       DOT,                TREE,   69,    2,    0,    0,    0},
        {       DOT,                TREE,   83,   86,    0,    0,    0},
        {       DOT,                TREE,   61,    8,    0,    0,    0},
        {       DOT,                TREE,   57,   67,    0,    0,    0},
        {       DOT,                TREE,   34,   49,    0,    0,    0},
        {       DOT,                TREE,   67,   42,    0,    0,    0},
        {       DOT,                TREE,   71,   57,    0,    0,    0},
        {       DOT,                TREE,   88,   12,    0,    0,    0},
        {       DOT,                TREE,   72,   67,    0,    0,    0},
        {       DOT,                TREE,    2,   60,    0,    0,    0},
        {       DOT,                TREE,   67,    6,    0,    0,    0},
        {       DOT,                TREE,   44,    6,    0,    0,    0},
        {       DOT,                TREE,   44,   15,    0,    0,    0},
        {       DOT,                TREE,   12,    2,    0,    0,    0},
        {       DOT,                TREE,   81,   44,    0,    0,    0},
        {       DOT,                TREE,   32,   83,    0,    0,    0},
        {       DOT,                TREE,   25,   61,    0,    0,    0},
        {       DOT,                TREE,   34,   52,    0,    0,    0},
        {       DOT,                TREE,   38,   86,    0,    0,    0},
        {       DOT,                TREE,   55,   10,    0,    0,    0},
        {       DOT,                TREE,   56,   91,    0,    0,    0},
        {       DOT,                TREE,   40,   11,    0,    0,    0},
        {       DOT,                TREE,   40,   52,    0,    0,    0},
        {       DOT,                TREE,   52,   14,    0,    0,    0},
        {       DOT,                TREE,   66,   56,    0,    0,    0},
        {       DOT,                TREE,   72,   77,    0,    0,    0},
        {       DOT,                TREE,   40,   84,    0,    0,    0},
        {       DOT,                TREE,   83,   92,    0,    0,    0},
        {       DOT,                TREE,   13,   99,    0,    0,    0},
        {       DOT,                TREE,    6,   51,    0,    0,    0},
        {       DOT,                TREE,    8,   27,    0,    0,    0},
        {       DOT,                TREE,   17,   10,    0,    0,    0},
        {       DOT,                TREE,   32,   51,    0,    0,    0},
        {       DOT,                TREE,   32,   58,    0,    0,    0},
        {       DOT,                TREE,    1,   76,    0,    0,    0},
        {       DOT,                TREE,   53,    8,    0,    0,    0},
        {       DOT,                TREE,   10,   66,    0,    0,    0},
        {       DOT,                TREE,   15,   52,    0,    0,    0},
        {       DOT,                TREE,   63,   17,    0,    0,    0},
        {       DOT,                TREE,   86,   94,    0,    0,    0},
        {       DOT,                TREE,   97,   59,    0,    0,    0},
        {       DOT,                TREE,   57,   44,    0,    0,    0},
        {       DOT,                TREE,   55,   66,    0,    0,    0},
        {       DOT,                TREE,   52,   45,    0,    0,    0},
        {       DOT,                TREE,   33,   84,    0,    0,    0},
        {       DOT,                TREE,   43,   53,    0,    0,    0},
        {       DOT,                TREE,   49,   55,    0,    0,    0},
        {       DOT,                TREE,    7,   68,    0,    0,    0},
        {       DOT,                TREE,   89,   37,    0,    0,    0},
        {       DOT,                TREE,    6,   24,    0,    0,    0},
        {       DOT,                TREE,    3,    9,    0,    0,    0},
        {       DOT,                TREE,   75,   90,    0,    0,    0},
        {       DOT,                TREE,   39,   41,    0,    0,    0},
        {       DOT,                TREE,   31,    2,    0,    0,    0},
        {       DOT,                TREE,   82,   25,    0,    0,    0},
        {       DOT,                TREE,   64,   86,    0,    0,    0},
        {       DOT,                TREE,   74,   14,    0,    0,    0},
        {       DOT,                TREE,   77,   22,    0,    0,    0},
        {       DOT,                TREE,   75,   33,    0,    0,    0},
        {       DOT,                TREE,   77,   45,    0,    0,    0},
        {       DOT,                TREE,   98,   11,    0,    0,    0},
        {       DOT,                TREE,   96,   24,    0,    0,    0},
        {       DOT,                TREE,   95,   35,    0,    0,    0},
    },    // forest
};

const int MAP_SZ = 100;

const AREA MAP[MAP_SZ] = 
{
           SEA,     BEACH,     BEACH,     BEACH,       SEA,       SEA,     BEACH,     BEACH,       SEA,       SEA,
           SEA,      CITY,  FARMLAND,  FARMLAND,     GRASS,    FOREST,    FOREST,  FARMLAND,     BEACH,       SEA,
           SEA,  FARMLAND,      POOL,     GRASS,     GRASS,    FOREST,    FOREST,      CITY,  FARMLAND,     GRASS,
         GRASS,  FARMLAND,     GRASS,     ROADA,      HILL,      HILL,     ROADB,  FARMLAND,     GRASS,       SEA,
          POOL,     GRASS,      HILL,  FARMLAND,      CITY,      CITY,  FARMLAND,     GRASS,      HILL,       SEA,
        FOREST,     GRASS,      HILL,  FARMLAND,      CITY,      CITY,  FARMLAND,      POOL,     GRASS,       SEA,
        FOREST,    FOREST,    FOREST,     ROADB,  FARMLAND,  FARMLAND,     ROADA,      HILL,    FOREST,     BEACH,
         BEACH,  FARMLAND,      CITY,  FARMLAND,      HILL,      HILL,    FOREST,    FOREST,    FOREST,     BEACH,
           SEA,    FOREST,      POOL,    FOREST,     GRASS,       SEA,     GRASS,     GRASS,      CITY,       SEA,
           SEA,       SEA,     BEACH,     BEACH,       SEA,       SEA,       SEA,     BEACH,     BEACH,       SEA,
};

struct circle_property
{
    int items;
    int delay;
    int wait;
    int move;
    double damage;
    double shrink;
};

const int CIRCLE_SZ = 9;

const circle_property CIRCLE_DATA[CIRCLE_SZ] = 
{ //      items     delay      wait      move    damage    shrink
    {     1000,      200,      200,      200,     0.50,     0.75},
    {      500,        0,      200,      180,     0.75,     0.60},
    {      250,        0,      200,      160,     1.00,     0.50},
    {      125,        0,      200,      140,     1.25,     0.50},
    {       50,        0,      200,      120,     1.50,     0.50},
    {       50,        0,      200,      100,     2.00,     0.50},
    {       50,        0,      200,       80,     3.00,     0.50},
    {       50,        0,      200,       60,     5.00,     0.50},
    {       50,        0,      200,       40,    10.00,     0.00},
};

#endif